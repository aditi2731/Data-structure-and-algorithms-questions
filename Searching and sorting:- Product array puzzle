APPROACH:-
1. Initialize the product_array: Create an array product_array of the same size as nums and initialize the first element to 1 because there are no elements to the left of the first element.
2. Calculate Left Products: Traverse the input array from left to right. For each element, store the product of all the elements to the left of it in product_array.
3. Calculate Right Products: Initialize a variable right_product to 1 and traverse the input array from right to left. For each element, multiply the corresponding element in product_array with right_product and update right_product to include the current element.



//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++

class Solution {
  public:
    // nums: given vector
    // return the Product vector P that hold product except self at each index
    vector<long long int> productExceptSelf(vector<long long int>& nums) {

        // code here
        int size=nums.size();
        vector<long long>product_array(size);
        product_array[0]=1;
        for(int i=1;i<size;i++){
            product_array[i]=product_array[i-1]*nums[i-1];
        }
        long long right_product=1;
        for(int i=size-1;i>=0;i--){
            product_array[i] *=right_product;
            right_product *= nums[i];
        }
        return product_array;
    }
};


//{ Driver Code Starts.
int main() {
    int t; // number of test cases
    cin >> t;
    while (t--) {
        int n; // size of the array
        cin >> n;
        vector<long long int> arr(n), vec(n);

        for (int i = 0; i < n; i++) // input the array
        {
            cin >> arr[i];
        }
        Solution obj;
        vec = obj.productExceptSelf(arr); // function call

        for (int i = 0; i < n; i++) // print the output
        {
            cout << vec[i] << " ";
        }
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends
